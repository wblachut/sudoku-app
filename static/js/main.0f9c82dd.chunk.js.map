{"version":3,"sources":["components/Sudoku/Styles.ts","components/Sudoku/SudokuCell/Style.ts","components/Sudoku/SudokuCell/SudokuInputCell/Style.ts","components/Sudoku/SudokuCell/index.ts","components/Sudoku/SudokuCell/SudokuInputCell/CellInputElement.tsx","components/Sudoku/SudokuCell/Picker/Style.ts","components/Sudoku/SudokuCell/Picker/Picker.tsx","components/App/context/store.hooks.ts","utils/solverFunction.ts","utils/sudokuFunctions.ts","components/App/context/preloadedState.ts","components/Sudoku/sudokuSlice.ts","components/Sudoku/SudokuCell/SudokuInputCell/SudokuInputCell.tsx","components/Sudoku/SudokuCell/SudokuCell.tsx","components/Sudoku/SudokuRow.tsx","components/SudokuOptions/index.ts","components/SudokuOptions/SudokuOptions.tsx","components/Sudoku/Sudoku.tsx","components/App/App.tsx","reportWebVitals.ts","components/App/context/store.ts","index.tsx"],"names":["Wrapper","styled","div","SudokuBoard","CellDiv","InvalidSpan","span","ValidSpan","CellInputDiv","assignValueToCell","value","board","solution","cords","setBoard","x","y","console","log","updatedBoard","JSON","parse","stringify","isValid","checkForValidValue","boardVal","solutionVal","CellInput","popupState","cellValue","inputValue","Fragment","type","maxLength","bindToggle","onInput","e","isNaN","currentTarget","onCellInput","PickerDiv","TileDiv","Picker","map","row","rowIndex","tileNumber","PickerTile","role","className","onClick","val","innerHTML","onPickerClick","useAppDispatch","useDispatch","useSelector","solveUserBoard","i","j","checkForSolved","possibilities","getPossibleSolutions","candidates","filterPossibleBoards","searchForSolution","length","currentCandidate","shift","currentCheck","filtered","checkBoard","push","emptySquare","getFirstEmptySquare","undefined","yCord","xCord","n","newCandidate","checkRows","checkColumns","checkBoxes","used","includes","col","startingBoxCords","getSudoku","raw","makepuzzle","rawSolution","solvepuzzle","getFormattedBoard","getFormattedSolution","formatted","formatToNumberBoard","formatToBoardOfCells","solutionBoard","numberBoard","boardOfCells","Object","assign","cell","isStatic","unformatted","replaceNullWithZeros","initialSudoku","preloadedState","validating","sudokuSlice","createSlice","name","initialState","reducers","setSudoku","action","payload","setSudokuBoard","state","setValidate","actions","getSudokuSelector","sudoku","sudokuReducer","reducer","SudokuEmptyCell","cellIndex","useState","isOpen","setIsOpen","usePopupState","variant","popupId","dispatch","ClickAwayListener","onClickAway","CellInputElement","Popper","bindPopper","transition","disablePortal","TransitionProps","Grow","timeout","SudokuCell","isValidating","data-cord","SudokuInputCell","SudokuRow","handleNewGame","setNewSudoku","userSudoku","newSudoku","handleUploadBoard","reader","FileReader","file","target","files","readAsText","onloadend","result","userInput","parsedUserBoard","parsedUserSolution","numberUserBoard","numberUserSolution","getUserSudoku","alert","useStyles","makeStyles","theme","createStyles","root","margin","spacing","Input","display","SudokuOptions","classes","setValidating","useEffect","every","handleValidateFullBoard","Button","color","disableElevation","handleValidateSudoku","htmlFor","accept","id","onChange","component","Sudoku","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAEaA,EAAUC,IAAOC,IAAV,iMAUPC,EAAcF,IAAOC,IAAV,wLCVXE,EAAUH,IAAOC,IAAV,uvBAsCPG,EAAcJ,IAAOK,KAAV,8FAKXC,EAAYN,IAAOK,KAAV,+F,gBC3CTE,EAAeP,IAAOC,IAAV,iP,mCC8BnBO,EAAoB,SACzBC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAIF,EAAM,GACVG,EAAIH,EAAM,GAChBI,QAAQC,IAAIR,EAAOG,GAInB,IAAMM,EAAeC,KAAKC,MAAMD,KAAKE,UAAUX,IAE/CQ,EAAaH,GAAGD,GAAGL,MAAQA,EAC3BS,EAAaH,GAAGD,GAAGQ,QAAUC,EAAmBd,EAAOE,EAASI,GAAGD,IAGnED,EAASK,IAGJK,EAAqB,SAACC,EAAkBC,GAC7C,OAAOD,IAAaC,G,OC5BNC,EAtBU,SAAC,GAMe,IALxCd,EAKuC,EALvCA,MACAF,EAIuC,EAJvCA,MACAC,EAGuC,EAHvCA,SACAgB,EAEuC,EAFvCA,WACAd,EACuC,EADvCA,SAEMe,EAAYlB,EAAME,EAAM,IAAIA,EAAM,IAAIH,MACtCoB,EAA2B,IAAdD,EAAkBA,EAAY,GACjD,OACC,cAAC,IAAME,SAAP,UACC,+CACCrB,MAAOoB,EACPE,KAAK,MACLC,UAAW,GACPC,qBAAWN,IAJhB,IAKCO,QAAS,SAACC,GAAD,ODnBc,SAC1BA,EACAzB,EACAC,EACAC,EACAC,GAIA,GAAIuB,OAAOD,EAAEE,cAAc5B,OAC1B0B,EAAEE,cAAc5B,MAAQ,QAGzB,GAAIC,GAASE,EAAO,CACnB,IAAMH,GAAS0B,EAAEE,cAAc5B,MAC/BD,EAAkBC,EAAOC,EAAOC,EAAUC,EAAOC,ICI/ByB,CAAYH,EAAGzB,EAAOC,EAAUC,EAAOC,UCnB9C0B,EAAYvC,IAAOC,IAAV,sJAOTuC,EAAUxC,IAAOC,IAAV,qVCoBLwC,EAxBO,SAAC,GAKU,IAJhC7B,EAI+B,EAJ/BA,MACAF,EAG+B,EAH/BA,MACAC,EAE+B,EAF/BA,SACAE,EAC+B,EAD/BA,SAEA,OACC,cAAC0B,EAAD,UACE7B,EAAMgC,KAAI,SAACC,EAAKC,GAChB,OACC,cAAC,EAAD,CACChC,MAAOA,EACPiC,WAAYD,EAEZlC,MAAOA,EACPC,SAAUA,EACVE,SAAUA,GANX,cAGa+B,UAaZE,EAAa,SAAC,GAMiB,IALpClC,EAKmC,EALnCA,MACAiC,EAImC,EAJnCA,WACAnC,EAGmC,EAHnCA,MACAC,EAEmC,EAFnCA,SACAE,EACmC,EADnCA,SAEA,OACC,cAAC2B,EAAD,CACCO,KAAK,SACLC,UAAU,oBACVC,QAAS,SAACd,GAAD,OHrBiB,SAC5BA,EACAzB,EACAC,EACAC,EACAC,GAEA,IAAMqC,EAAMf,EAAEE,cAAcc,UAC5B3C,GAAmB0C,EAAKxC,EAAOC,EAAUC,EAAOC,GGa9BuC,CAAcjB,EAAGzB,EAAOC,EAAUC,EAAOC,IAH1D,SAKEgC,EAAa,K,gBCzCJQ,EAAiB,kBAAMC,e,GAC2BC,I,uBCFlDC,EAAiB,SAAC9C,GAC9B,GASD,SAAwBA,GACvB,IAAK,IAAI+C,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACtB,GAAoB,IAAhBhD,EAAM+C,GAAGC,GACZ,OAAO,EAIV,OAAO,EAjBHC,CAAejD,GAClB,OAAOA,EAEP,IAAMkD,EAAgBC,EAAqBnD,GACrCoD,EAAaC,EAAqBH,GACxC,OAAOI,EAAkBF,IAe3B,IAAME,EAAoB,SAApBA,EACLF,GAEA,GAAIA,EAAWG,OAAS,EACvB,OAAO,EAEP,IAAMC,EAAmBJ,EAAWK,QAC9BC,EAAeZ,EAAeU,GACpC,OAAqB,IAAjBE,EACIA,EAEAJ,EAAkBF,IAKtBC,EAAuB,SAACD,GAC7B,IAAMO,EAAW,GACjB,GAAKP,EAAL,CACA,IAAK,IAAIL,EAAI,EAAGA,EAAIK,EAAWG,OAAQR,IAClCa,EAAWR,EAAWL,KACzBY,EAASE,KAAKT,EAAWL,IAG3B,OAAOY,IAGFR,EAAuB,SAACnD,GAC7B,IAAMoD,EAAa,GACbU,EAAcC,EAAoB/D,GACxC,QAAoBgE,IAAhBF,EAGH,IAFA,IAAMG,EAAQH,EAAY,GACpBI,EAAQJ,EAAY,GACjBK,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC5B,IAAMC,EAAY,YAAOpE,GACnBiC,EAAG,YAAOmC,EAAaH,IAC7BhC,EAAIiC,GAASC,EACbC,EAAaH,GAAShC,EACtBmB,EAAWS,KAAKO,GAGlB,OAAOhB,GAGFW,EAAsB,SAAC/D,GAC5B,IAAK,IAAI+C,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACtB,GAAoB,IAAhBhD,EAAM+C,GAAGC,GACZ,MAAO,CAACD,EAAGC,IAMTY,EAAa,SAAC5D,GACnB,GAAIqE,EAAUrE,IAAUsE,EAAatE,IAAUuE,EAAWvE,GAAQ,OAAO,GAGpEqE,EAAY,SAACrE,GAClB,IAAK,IAAIiC,EAAM,EAAGA,EAAMjC,EAAMuD,OAAQtB,IAErC,IADA,IAAMuC,EAAiB,GACdzB,EAAI,EAAGA,EAAI/C,EAAMuD,OAAQR,IAAK,CACtC,IAAMhD,EAAQC,EAAMiC,GAAKc,GACzB,GAAIyB,EAAKC,SAAS1E,GACjB,OAAO,EACa,IAAVA,GACVyE,EAAKX,KAAK9D,GAIb,OAAO,GAGFuE,EAAe,SAACtE,GACrB,IAAK,IAAI0E,EAAM,EAAGA,EAAM1E,EAAMuD,OAAQmB,IAErC,IADA,IAAMF,EAAiB,GACdzB,EAAI,EAAGA,EAAI/C,EAAMuD,OAAQR,IAAK,CACtC,IAAMhD,EAAQC,EAAM+C,GAAG2B,GACvB,GAAIF,EAAKC,SAAS1E,GACjB,OAAO,EACa,IAAVA,GACVyE,EAAKX,KAAK9D,GAIb,OAAO,GAGFwE,EAAa,SAACvE,GAanB,IAZA,IAAM2E,EAAmB,CACxB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAGI1C,EAAM,EAAGA,EAAMjC,EAAMuD,OAAQtB,GAAO,EAC5C,IAAK,IAAIyC,EAAM,EAAGA,EAAM1E,EAAMuD,OAAQmB,GAAO,EAE5C,IADA,IAAMF,EAAiB,GACdzB,EAAI,EAAGA,EAAI/C,EAAMuD,OAAQR,IAAK,CACtC,IAAMkB,EAAQU,EAAiB5B,GAAG,GAAKd,EACjCiC,EAAQS,EAAiB5B,GAAG,GAAK2B,EACjC3E,EAAQC,EAAMiE,GAAOC,GAC3B,GAAIM,EAAKC,SAAS1E,GACjB,OAAO,EACa,IAAVA,GACVyE,EAAKX,KAAK9D,GAKd,OAAO,GClIK6E,EAAY,WACxB,IAAMC,EAAMC,uBACNC,EAAcC,sBAAYH,GAMhC,MAJe,CACd7E,MAAOiF,EAAkBJ,GACzB5E,SAAUiF,GAAqBH,KAK3BE,EAAoB,SAACJ,GAC1B,IAAM7E,EAAQ6E,EAAI7C,KAAI,SAACP,GAAD,OAAsB,OAANA,EAAa,EAAIA,EAAI,KACrD0D,EAAYC,GAAoBpF,GACtC,OAAOqF,GAAqBF,IAGvBD,GAAuB,SAACH,GAC7B,IAAMO,EAAgBP,EAAY/C,KAAI,SAACP,GAAD,OAAeA,EAAI,KACzD,OAAO2D,GAAoBE,IAGfD,GAAuB,SAACE,GAEpC,IADA,IAAMC,EAAeC,OAAOC,OAAOH,GAC1BxC,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3B,IAAMjD,EAAQwF,EAAYxC,GAAGC,GACvB2C,EAAa,CAClB5F,MAAOA,EACP6F,SAAoB,IAAV7F,EACVa,QAAmB,IAAVb,GAEVyF,EAAazC,GAAGC,GAAK2C,EAGvB,OAAOH,GAGFJ,GAAsB,SAACS,GAE5B,IADA,IAAM7F,EAAoB,GACjB+C,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE3B,IADA,IAAMd,EAAgB,GACbe,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3B,IACM2C,EADQE,EAAgB,EAAJ9C,EAAQC,GAElCf,EAAI4B,KAAK8B,GAEV3F,EAAM6D,KAAK5B,GAEZ,OAAOjC,GAGK8F,GAAuB,SAAC9F,GAEpC,IADA,IAAMmF,EAAYM,OAAOC,OAAO1F,GACvB+C,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACE,OAApBmC,EAAUpC,GAAGC,KAChBmC,EAAUpC,GAAGC,GAAK,GAIrB,OAAOmC,GC7DFY,GAAgBnB,IAQPoB,GANqB,CACnChG,MAAO+F,GAAc/F,MACrBC,SAAU8F,GAAc9F,SACxBgG,YAAY,GCHPC,GAAcC,YAAY,CAC/BC,KAAM,SACNC,aAAcL,GACdM,SAAU,CACTC,UAAW,WAGiB,IAD3BC,EAC0B,uCAC1B,MAAO,CACNxG,MAAOwG,EAAOC,QAAQzG,MACtBC,SAAUuG,EAAOC,QAAQxG,SACzBgG,YAAY,IAGdS,eAAgB,WAGL,IAFVC,EAES,uDAFYX,GACrBQ,EACS,uCACT,OAAO,2BACHG,GADJ,IAEC3G,MAAOwG,EAAOC,WAGhBG,YAAa,WAGF,IAFVD,EAES,uDAFYX,GACrBQ,EACS,uCACT,OAAO,2BACHG,GADJ,IAECV,WAAYO,EAAOC,c,GAMmCP,GAAYW,QAAvDN,G,GAAAA,UAAWG,G,GAAAA,eAAgBE,G,GAAAA,YAE7BE,GAAoB,SAACH,GAAD,OAAsBA,EAAMI,QAEhDC,GAAgBd,GAAYe,QCiB1BC,GAlDgB,SAAC,GAIQ,IAHvCC,EAGsC,EAHtCA,UACAjF,EAEsC,EAFtCA,SACAlC,EACsC,EADtCA,MACsC,EACVoH,oBAAkB,GADR,mBAC/BC,EAD+B,KACvBC,EADuB,KAIhCrG,EAAasG,wBAAc,CAChCC,QAAS,SACTC,QAAS,iBAGJxH,EAAW4C,YAAYiE,IAAmB7G,SAC1CyH,EAAW/E,IACXxC,EAAW,SAACH,GACjB0H,EAAShB,GAAe1G,KAGzB,OACC,cAAC2H,EAAA,EAAD,CAAmBC,YAdI,kBAAYN,GAAU,IAc7C,SACC,eAACzH,EAAD,CAAc0C,QAdI,kBAAY+E,GAAU,SAACD,GAAD,OAAaA,MAcrD,UACC,cAACQ,EAAD,aACC3H,MAAO,CAACgC,EAAUiF,GAClBnH,MAAOA,EACPC,SAAUA,EACVgB,WAAYA,EACZd,SAAUA,GACNoB,qBAAWN,KAEfoG,GACA,cAACS,EAAA,EAAD,2BAAYC,qBAAW9G,IAAvB,IAAoC+G,YAAU,EAACC,eAAe,EAA9D,SACE,gBAAGC,EAAH,EAAGA,gBAAH,OACA,cAACC,EAAA,EAAD,2BAAUD,GAAV,IAA2BE,QAAS,IAApC,SACC,cAAC,EAAD,CACClI,MAAO,CAACgC,EAAUiF,GAClBnH,MAAOA,EACPC,SAAUA,EAEVE,SAAUA,iBCjBJkI,GAhCW,SAAC,GAKQ,IAJlCnG,EAIiC,EAJjCA,SACAiF,EAGiC,EAHjCA,UACAxB,EAEiC,EAFjCA,KACA3F,EACiC,EADjCA,MAEMsI,EAAezF,YAAYiE,IAAmBb,WAEpD,OACC,eAACxG,EAAD,CACC6C,UAAU,cACViG,YAAW,CAACrG,EAAUiF,GAFvB,UAKExB,EAAKC,UAAYD,EAAK5F,MACP,IAAf4F,EAAK5F,QAAgB4F,EAAK/E,SAAW0H,GACrC,cAAC5I,EAAD,UAAciG,EAAK5F,SAElB4F,EAAKC,UAAYD,EAAK/E,SAAW0H,GAClC,cAAC1I,EAAD,UAAY+F,EAAK5F,SAEhB4F,EAAKC,WAAa0C,GACnB,cAACE,GAAD,CACCtG,SAAUA,EACViF,UAAWA,EACXnH,MAAOA,MAhBV,aAGYkC,EAHZ,cAG0BiF,KCGbsB,GAlBU,SAAC,GAAoD,IAAlDvG,EAAiD,EAAjDA,SAAUlC,EAAuC,EAAvCA,MACrC,OACC,cAAC,IAAMoB,SAAP,UACEpB,EAAMkC,GAAUF,KAAI,SAAC2D,EAAMwB,GAC3B,OACC,cAAC,GAAD,CACCjF,SAAUA,EACViF,UAAWA,EACXxB,KAAMA,EACN3F,MAAOA,GAJR,aAKYkC,EALZ,cAK0BiF,U,8BCVlBuB,GAAgB,SAC5BC,EACAC,GAEA,IAAMC,EAAYD,GAAchE,IAChC+D,EAAaE,EAAU7I,MAAO6I,EAAU5I,WAgB5B6I,GAAoB,SAChCrH,EACAkH,GAEA,IAAMI,EAAS,IAAIC,WACbC,EAAOxH,EAAEyH,OAAOC,MAAO,GAC7BJ,EAAOK,WAAWH,GAClBF,EAAOM,UAAY,SAAC5H,GAAO,IAAD,EACzB,aAAIA,EAAEyH,cAAN,aAAI,EAAUI,OAAQ,CACrB,IAAMC,EAAyCR,EAAOO,OACtD,GAAyB,kBAAdC,EACV,IACC,IAAMX,ENoCkB,SAACW,GAC7B,IAAMC,EAAkB/I,KAAKC,MAAM6I,GAAWvJ,MACxCyJ,EAAqBhJ,KAAKC,MAAM6I,GAAWvJ,MAE3C0J,EAAkB5D,GAAqB0D,GACvCG,EAAqB7D,GAAqB2D,GAIhD,MAAO,CACNzJ,MAJaqF,GAAqBqE,GAKlCzJ,SAJgB6C,EAAe6G,IM3CTC,CAAcL,GACjC,IAAKX,EAAW3I,SAEf,YADA4J,MAAM,0BAGPnB,GAAcC,EAAcC,GAC5BiB,MAAM,6BACL,MAAOpI,GACRoI,MAAM,4BCzBLC,GAAYC,cAAW,SAACC,GAAD,OAC5BC,aAAa,CACZC,KAAM,CACL,QAAS,CACRC,OAAQH,EAAMI,QAAQ,UAOpBC,GAAQ/K,YAAO,QAAPA,CAAgB,CAC7BgL,QAAS,SA4DKC,GAzDc,SAAC,GAA8C,IAA5CvK,EAA2C,EAA3CA,MACzBwK,EAAUV,KACVxB,EAAezF,YAAYiE,IAAmBb,WAE9CyB,EAAW/E,IACX8H,EAAgB,SAACnC,GACtBZ,EAASd,GAAY0B,KAEhBK,EAAe,SAAC3I,EAAcC,GACnCyH,EAASnB,GAAU,CAAEvG,QAAOC,eAO7B,OAJAyK,qBAAU,YD5B4B,SAAC1K,GACnCA,EAAM2K,OAAM,SAAC1I,GAAD,OAASA,EAAI0I,OAAM,SAAChF,GAAD,OAAUA,EAAK/E,eACjDiJ,MAAM,2BC2BNe,CAAwB5K,KACtB,CAACA,IAGH,sBAAKsC,UAAWkI,EAAQN,KAAxB,UACC,cAACW,GAAA,EAAD,CACCC,MAAM,UACNtD,QAAQ,YACRuD,kBAAgB,EAChBxI,QAAS,kBAAMmG,GAAcC,IAJ9B,sBAQA,cAACkC,GAAA,EAAD,CACCC,MAAM,UACNtD,QAAQ,YACRuD,kBAAgB,EAChBxI,QAAS,kBDrDuB,SACnC+F,EACAmC,GAEAA,GAAenC,GCiDG0C,CAAqB1C,EAAcmC,IAJnD,SAMEnC,EAAe,SAAW,aAClB,IACV,8BACC,wBAAO2C,QAAQ,wBAAf,UACC,cAACZ,GAAD,CACCa,OAAO,QACPC,GAAG,wBACH9J,KAAK,OAEL+J,SAAU,SAAC3J,GAAD,OAAYqH,GAAkBrH,EAAGkH,MAE5C,cAACkC,GAAA,EAAD,CACCrD,QAAQ,YACR6D,UAAU,OACVN,kBAAgB,EAChBD,MAAM,YAJP,mCChDUQ,GAtBO,WACrB,IAAMtL,EAAQ6C,YAAYiE,IAAmB9G,MAE7C,OACC,eAACX,EAAD,WACC,cAACG,EAAD,UACEQ,GACAA,EAAMgC,KAAI,SAACC,EAAaC,GACvB,OACC,cAAC,GAAD,CACCA,SAAUA,EACVlC,MAAOA,GAFR,aAGYkC,SAKhB,cAAC,GAAD,CAAelC,MAAOA,QCbVuL,GARI,WAClB,OACC,qBAAKjJ,UAAU,qBAAf,SACC,cAAC,GAAD,OCOYkJ,GAZS,SAACC,GACpBA,GAAeA,aAAuBC,UACzC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLLxE,GAAU,CACfF,OAAQC,IAaMiF,GAVDC,YAAe,CAC5BjF,aCDDkF,IAASC,OACR,eAAC,IAAMC,WAAP,WACC,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SACC,cAAC,GAAD,MAFF,OAKAK,SAASC,eAAe,SAGzBf,O","file":"static/js/main.0f9c82dd.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n\tbackground-color: #282c34;\r\n\theight: 100%;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\toverflow: hidden;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`;\r\n\r\nexport const SudokuBoard = styled.div`\r\n\t// min-width: 100vw;\r\n\tdisplay: grid;\r\n\tgrid-template-columns: repeat(9, 1fr);\r\n\tgrid-template-rows: repeat(9, 1fr);\r\n\tgrid-gap: 2px;\r\n\tz-index: 0;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const CellDiv = styled.div`\r\n\tbackground-color: #21242a;\r\n\tcolor: #61dafb;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tfont-size: 1.6vmax;\r\n\tfont-weight: bold;\r\n\tpadding: 0;\r\n\tmargin: 0;\r\n\theight: 8vw;\r\n\twidth: 8vw;\r\n\r\n\t&:nth-of-type(9n + 4),\r\n\t&:nth-of-type(9n + 5),\r\n\t&:nth-of-type(9n + 6),\r\n\t&:nth-of-type(n + 28):nth-of-type(-n + 54) {\r\n\t\tbackground-color: #181c21;\r\n\t}\r\n\t&:nth-of-type(n + 28):nth-of-type(-n + 54):nth-of-type(9n + 4),\r\n\t&:nth-of-type(n + 28):nth-of-type(-n + 54):nth-of-type(9n + 5),\r\n\t&:nth-of-type(n + 28):nth-of-type(-n + 54):nth-of-type(9n + 6) {\r\n\t\tbackground-color: #21242a;\r\n\t}\r\n\r\n\t@media (min-width: 736px) {\r\n\t\tmax-height: 4vw !important;\r\n\t\tmax-width: 4vw !important;\r\n\t}\r\n`;\r\n\r\n// export const ValidateSpan = styled.span`\r\n// \tcolor: ${(props) => (props.valid ? 'lightgreen' : 'lightcoral')};\r\n// \tcolor: lightcoral;\r\n// \tfont-family: arial;\r\n// \tfont-weight: 400;\r\n// `;\r\n\r\nexport const InvalidSpan = styled.span`\r\n\tcolor: lightcoral;\r\n\tfont-family: arial;\r\n\tfont-weight: 400;\r\n`;\r\nexport const ValidSpan = styled.span`\r\n\tcolor: springgreen;\r\n\tfont-family: arial;\r\n\tfont-weight: 400;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const CellInputDiv = styled.div`\r\n\t& input {\r\n\t\toverflow: hidden;\r\n\t\twidth: 100%;\r\n\t\tbackground: none;\r\n\t\toutline: none;\r\n\t\tborder: none;\r\n\t\tcolor: white;\r\n\t\ttext-align: center;\r\n\t\tfont-size: 1.8vmax;\r\n\t\tmin-height: 50px;\r\n\t}\r\n`;\r\n","import { Board, NumberBoard } from '../types';\r\n\r\nexport const onCellInput = (\r\n\te: React.SyntheticEvent<HTMLInputElement>,\r\n\tboard: Board,\r\n\tsolution: NumberBoard,\r\n\tcords: [number, number],\r\n\tsetBoard: (board: Board) => void\r\n): void => {\r\n\t// console.log(e.nativeEvent.data);\r\n\t//e.currentTarget.value = e.nativeEvent.data;\r\n\tif (isNaN(+e.currentTarget.value)) {\r\n\t\te.currentTarget.value = '';\r\n\t\treturn;\r\n\t}\r\n\tif (board && cords) {\r\n\t\tconst value = +e.currentTarget.value;\r\n\t\tassignValueToCell(value, board, solution, cords, setBoard);\r\n\t}\r\n};\r\n\r\nexport const onPickerClick = (\r\n\te: React.MouseEvent<HTMLDivElement>,\r\n\tboard: Board,\r\n\tsolution: NumberBoard,\r\n\tcords: [number, number],\r\n\tsetBoard: (board: Board) => void\r\n): void => {\r\n\tconst val = e.currentTarget.innerHTML;\r\n\tassignValueToCell(+val, board, solution, cords, setBoard);\r\n};\r\n\r\nconst assignValueToCell = (\r\n\tvalue: number,\r\n\tboard: Board,\r\n\tsolution: NumberBoard,\r\n\tcords: [number, number],\r\n\tsetBoard: (board: Board) => void\r\n): void => {\r\n\tconst x = cords[1];\r\n\tconst y = cords[0];\r\n\tconsole.log(value, cords);\r\n\t// const updatedBoard = Object.create(board);\r\n\t// const updatedBoard = { ...board };\r\n\t// *THIS CODE SHOULD BE FIXED* fix to normal deep clone\r\n\tconst updatedBoard = JSON.parse(JSON.stringify(board));\r\n\t// console.log(Object.is(updatedBoard, board));\r\n\tupdatedBoard[y][x].value = value;\r\n\tupdatedBoard[y][x].isValid = checkForValidValue(value, solution[y][x]);\r\n\r\n\t// console.log(updatedBoard[y][x].value);\r\n\tsetBoard(updatedBoard);\r\n};\r\n\r\nconst checkForValidValue = (boardVal: number, solutionVal: number): boolean => {\r\n\treturn boardVal === solutionVal;\r\n};\r\n","import React from 'react';\r\nimport { CellInpElementProps } from '../../types';\r\nimport { bindToggle } from 'material-ui-popup-state';\r\nimport { onCellInput } from '../index';\r\n\r\nexport const CellInput = ({\r\n\tcords,\r\n\tboard,\r\n\tsolution,\r\n\tpopupState,\r\n\tsetBoard,\r\n}: CellInpElementProps): JSX.Element => {\r\n\tconst cellValue = board[cords[0]][cords[1]].value;\r\n\tconst inputValue = cellValue !== 0 ? cellValue : '';\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<input\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\ttype=\"tel\"\r\n\t\t\t\tmaxLength={1}\r\n\t\t\t\t{...bindToggle(popupState)}\r\n\t\t\t\tonInput={(e) => onCellInput(e, board, solution, cords, setBoard)}\r\n\t\t\t></input>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default CellInput;\r\n","import styled from 'styled-components';\r\n\r\nexport const PickerDiv = styled.div`\r\n\tborder-radius: 5px;\r\n\tdisplay: grid;\r\n\tgrid-template-columns: repeat(3, 1fr);\r\n\tgrid-template-rows: repeat(3, 1fr);\r\n`;\r\n\r\nexport const TileDiv = styled.div`\r\n\tbackground-color: rgb(255, 255, 255);\r\n\tpadding: 15px 15px;\r\n\tborder: 1px solid rgb(80, 80, 80);\r\n\tborder-radius: 5px;\r\n\tdisplay: flex;\r\n\tjustify-content: center\r\n\ttext-align: center;\r\n\talign-items: center;\r\n\toverflow: hidden;\r\n\tposition: relative;\r\n\tcolor: #9e9e9e;\r\n\twidth: 20px;\r\n\theight: 20px;\r\n`;\r\n","import React from 'react';\r\nimport { PickerDiv, TileDiv } from './Style';\r\nimport { PickerProps, PickerTileProps } from '../../types';\r\nimport { onPickerClick } from '../index';\r\n\r\nexport const Picker = ({\r\n\tcords,\r\n\tboard,\r\n\tsolution,\r\n\tsetBoard,\r\n}: PickerProps): JSX.Element => {\r\n\treturn (\r\n\t\t<PickerDiv>\r\n\t\t\t{board.map((row, rowIndex) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<PickerTile\r\n\t\t\t\t\t\tcords={cords}\r\n\t\t\t\t\t\ttileNumber={rowIndex}\r\n\t\t\t\t\t\tkey={`tile${rowIndex}`}\r\n\t\t\t\t\t\tboard={board}\r\n\t\t\t\t\t\tsolution={solution}\r\n\t\t\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</PickerDiv>\r\n\t);\r\n};\r\n\r\nexport default Picker;\r\n\r\nconst PickerTile = ({\r\n\tcords,\r\n\ttileNumber,\r\n\tboard,\r\n\tsolution,\r\n\tsetBoard,\r\n}: PickerTileProps): JSX.Element => {\r\n\treturn (\r\n\t\t<TileDiv\r\n\t\t\trole=\"button\"\r\n\t\t\tclassName=\"sudoku-picker-box\"\r\n\t\t\tonClick={(e) => onPickerClick(e, board, solution, cords, setBoard)}\r\n\t\t>\r\n\t\t\t{tileNumber + 1}\r\n\t\t</TileDiv>\r\n\t);\r\n};\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { RootState, AppDispatch } from './store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { NumberBoard } from '../components/Sudoku/types';\r\n\r\nexport const solveUserBoard = (board: NumberBoard): any => {\r\n\tif (checkForSolved(board)) {\r\n\t\treturn board;\r\n\t} else {\r\n\t\tconst possibilities = getPossibleSolutions(board);\r\n\t\tconst candidates = filterPossibleBoards(possibilities);\r\n\t\treturn searchForSolution(candidates);\r\n\t}\r\n};\r\n\r\nfunction checkForSolved(board: NumberBoard) {\r\n\tfor (let i = 0; i < 9; i++) {\r\n\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\tif (board[i][j] === 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nconst searchForSolution = (\r\n\tcandidates: NumberBoard[]\r\n): NumberBoard | boolean => {\r\n\tif (candidates.length < 1) {\r\n\t\treturn false;\r\n\t} else {\r\n\t\tconst currentCandidate = candidates.shift();\r\n\t\tconst currentCheck = solveUserBoard(currentCandidate!);\r\n\t\tif (currentCheck !== false) {\r\n\t\t\treturn currentCheck;\r\n\t\t} else {\r\n\t\t\treturn searchForSolution(candidates);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst filterPossibleBoards = (candidates: NumberBoard[]): any => {\r\n\tconst filtered = [];\r\n\tif (!candidates) return;\r\n\tfor (let i = 0; i < candidates.length; i++) {\r\n\t\tif (checkBoard(candidates[i])) {\r\n\t\t\tfiltered.push(candidates[i]);\r\n\t\t}\r\n\t}\r\n\treturn filtered;\r\n};\r\n\r\nconst getPossibleSolutions = (board: NumberBoard): NumberBoard[] => {\r\n\tconst candidates = [];\r\n\tconst emptySquare = getFirstEmptySquare(board);\r\n\tif (emptySquare !== undefined) {\r\n\t\tconst yCord = emptySquare[0];\r\n\t\tconst xCord = emptySquare[1];\r\n\t\tfor (let n = 1; n <= 9; n++) {\r\n\t\t\tconst newCandidate = [...board];\r\n\t\t\tconst row = [...newCandidate[yCord]];\r\n\t\t\trow[xCord] = n;\r\n\t\t\tnewCandidate[yCord] = row;\r\n\t\t\tcandidates.push(newCandidate);\r\n\t\t}\r\n\t}\r\n\treturn candidates;\r\n};\r\n\r\nconst getFirstEmptySquare = (board: NumberBoard): number[] | undefined => {\r\n\tfor (let i = 0; i < 9; i++) {\r\n\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\tif (board[i][j] === 0) {\r\n\t\t\t\treturn [i, j];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst checkBoard = (board: NumberBoard): boolean | undefined => {\r\n\tif (checkRows(board) && checkColumns(board) && checkBoxes(board)) return true;\r\n};\r\n\r\nconst checkRows = (board: NumberBoard): boolean => {\r\n\tfor (let row = 0; row < board.length; row++) {\r\n\t\tconst used: number[] = [];\r\n\t\tfor (let i = 0; i < board.length; i++) {\r\n\t\t\tconst value = board[row][i];\r\n\t\t\tif (used.includes(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t} else if (value !== 0) {\r\n\t\t\t\tused.push(value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nconst checkColumns = (board: NumberBoard): boolean => {\r\n\tfor (let col = 0; col < board.length; col++) {\r\n\t\tconst used: number[] = [];\r\n\t\tfor (let i = 0; i < board.length; i++) {\r\n\t\t\tconst value = board[i][col];\r\n\t\t\tif (used.includes(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t} else if (value !== 0) {\r\n\t\t\t\tused.push(value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nconst checkBoxes = (board: NumberBoard): boolean => {\r\n\tconst startingBoxCords = [\r\n\t\t[0, 0],\r\n\t\t[0, 1],\r\n\t\t[0, 2],\r\n\t\t[1, 0],\r\n\t\t[1, 1],\r\n\t\t[1, 2],\r\n\t\t[2, 0],\r\n\t\t[2, 1],\r\n\t\t[2, 2],\r\n\t];\r\n\r\n\tfor (let row = 0; row < board.length; row += 3) {\r\n\t\tfor (let col = 0; col < board.length; col += 3) {\r\n\t\t\tconst used: number[] = [];\r\n\t\t\tfor (let i = 0; i < board.length; i++) {\r\n\t\t\t\tconst yCord = startingBoxCords[i][0] + row;\r\n\t\t\t\tconst xCord = startingBoxCords[i][1] + col;\r\n\t\t\t\tconst value = board[yCord][xCord];\r\n\t\t\t\tif (used.includes(value)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else if (value !== 0) {\r\n\t\t\t\t\tused.push(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n","import {\r\n\tNumberBoard,\r\n\tCell,\r\n\tBoard,\r\n\tSudokuType,\r\n} from '../components/Sudoku/types';\r\nimport { makepuzzle, solvepuzzle } from 'sudoku';\r\nimport { solveUserBoard } from './solverFunction';\r\n\r\nexport const getSudoku = (): SudokuType => {\r\n\tconst raw = makepuzzle();\r\n\tconst rawSolution = solvepuzzle(raw);\r\n\r\n\tconst sudoku = {\r\n\t\tboard: getFormattedBoard(raw),\r\n\t\tsolution: getFormattedSolution(rawSolution),\r\n\t};\r\n\treturn sudoku;\r\n};\r\n\r\nconst getFormattedBoard = (raw: number[]): Board => {\r\n\tconst board = raw.map((e: number) => (e === null ? 0 : e + 1));\r\n\tconst formatted = formatToNumberBoard(board);\r\n\treturn formatToBoardOfCells(formatted);\r\n};\r\n\r\nconst getFormattedSolution = (rawSolution: number[]): NumberBoard => {\r\n\tconst solutionBoard = rawSolution.map((e: number) => e + 1);\r\n\treturn formatToNumberBoard(solutionBoard);\r\n};\r\n\r\nexport const formatToBoardOfCells = (numberBoard: NumberBoard): Board => {\r\n\tconst boardOfCells = Object.assign(numberBoard);\r\n\tfor (let i = 0; i < 9; i++) {\r\n\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\tconst value = numberBoard[i][j];\r\n\t\t\tconst cell: Cell = {\r\n\t\t\t\tvalue: value,\r\n\t\t\t\tisStatic: value !== 0,\r\n\t\t\t\tisValid: value !== 0,\r\n\t\t\t};\r\n\t\t\tboardOfCells[i][j] = cell;\r\n\t\t}\r\n\t}\r\n\treturn boardOfCells;\r\n};\r\n\r\nconst formatToNumberBoard = (unformatted: number[]): NumberBoard => {\r\n\tconst board: number[][] = [];\r\n\tfor (let i = 0; i < 9; i++) {\r\n\t\tconst row: number[] = [];\r\n\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\tconst value = unformatted[i * 9 + j];\r\n\t\t\tconst cell: number = value;\r\n\t\t\trow.push(cell);\r\n\t\t}\r\n\t\tboard.push(row);\r\n\t}\r\n\treturn board;\r\n};\r\n\r\nexport const replaceNullWithZeros = (board: NumberBoard): NumberBoard => {\r\n\tconst formatted = Object.assign(board);\r\n\tfor (let i = 0; i < 9; i++) {\r\n\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\tif (formatted[i][j] === null) {\r\n\t\t\t\tformatted[i][j] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn formatted;\r\n};\r\n\r\nexport const getUserSudoku = (userInput: string): SudokuType => {\r\n\tconst parsedUserBoard = JSON.parse(userInput).board;\r\n\tconst parsedUserSolution = JSON.parse(userInput).board;\r\n\t// *FIND BETTER SOLUTION* problem with deep cloning...\r\n\tconst numberUserBoard = replaceNullWithZeros(parsedUserBoard);\r\n\tconst numberUserSolution = replaceNullWithZeros(parsedUserSolution);\r\n\tconst board = formatToBoardOfCells(numberUserBoard);\r\n\tconst solution = solveUserBoard(numberUserSolution);\r\n\r\n\treturn {\r\n\t\tboard: board,\r\n\t\tsolution: solution,\r\n\t};\r\n};\r\n","import { getSudoku } from '../../../utils/sudokuFunctions';\r\nimport { Board, NumberBoard } from '../../Sudoku/types';\r\n\r\nexport type SudokuState = {\r\n\tboard: Board;\r\n\tsolution: NumberBoard;\r\n\tvalidating: boolean;\r\n};\r\n\r\nconst initialSudoku = getSudoku();\r\n\r\nconst preloadedState: SudokuState = {\r\n\tboard: initialSudoku.board,\r\n\tsolution: initialSudoku.solution,\r\n\tvalidating: false,\r\n};\r\n\r\nexport default preloadedState;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport preloadedState, { SudokuState } from '../App/context/preloadedState';\r\nimport { RootState } from '../App/context/store';\r\nimport { Board, NumberBoard, SudokuType } from './types';\r\n\r\ntype SetSudokuPayloadType = {\r\n\tboard: Board;\r\n\tsolution: NumberBoard;\r\n\tvalidating: false;\r\n};\r\n\r\nconst sudokuSlice = createSlice({\r\n\tname: 'sudoku',\r\n\tinitialState: preloadedState,\r\n\treducers: {\r\n\t\tsetSudoku: (\r\n\t\t\tstate: SudokuState = preloadedState,\r\n\t\t\taction: PayloadAction<SudokuType>\r\n\t\t): SetSudokuPayloadType => {\r\n\t\t\treturn {\r\n\t\t\t\tboard: action.payload.board,\r\n\t\t\t\tsolution: action.payload.solution,\r\n\t\t\t\tvalidating: false,\r\n\t\t\t};\r\n\t\t},\r\n\t\tsetSudokuBoard: (\r\n\t\t\tstate: SudokuState = preloadedState,\r\n\t\t\taction: PayloadAction<Board>\r\n\t\t): any => {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tboard: action.payload,\r\n\t\t\t};\r\n\t\t},\r\n\t\tsetValidate: (\r\n\t\t\tstate: SudokuState = preloadedState,\r\n\t\t\taction: PayloadAction<boolean>\r\n\t\t): any => {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tvalidating: action.payload,\r\n\t\t\t};\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const { setSudoku, setSudokuBoard, setValidate } = sudokuSlice.actions;\r\n\r\nexport const getSudokuSelector = (state: RootState) => state.sudoku;\r\n\r\nexport const sudokuReducer = sudokuSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { CellInputDiv } from './Style';\r\nimport { Board, SudoEmptyCellProps } from '../../types';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport CellInputElement from './CellInputElement';\r\nimport Picker from '../Picker/Picker';\r\nimport {\r\n\tusePopupState,\r\n\tbindToggle,\r\n\tbindPopper,\r\n} from 'material-ui-popup-state/hooks';\r\nimport { useAppDispatch } from '../../../App/context/store.hooks';\r\nimport { setSudokuBoard, getSudokuSelector } from '../../sudokuSlice';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const SudokuEmptyCell = ({\r\n\tcellIndex,\r\n\trowIndex,\r\n\tboard,\r\n}: SudoEmptyCellProps): JSX.Element => {\r\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\r\n\tconst handleClickAway = (): void => setIsOpen(false);\r\n\tconst handleClick = (): void => setIsOpen((isOpen) => !isOpen);\r\n\tconst popupState = usePopupState({\r\n\t\tvariant: 'popper',\r\n\t\tpopupId: 'sudokuPopper',\r\n\t});\r\n\r\n\tconst solution = useSelector(getSudokuSelector).solution;\r\n\tconst dispatch = useAppDispatch();\r\n\tconst setBoard = (board: Board) => {\r\n\t\tdispatch(setSudokuBoard(board));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ClickAwayListener onClickAway={handleClickAway}>\r\n\t\t\t<CellInputDiv onClick={handleClick}>\r\n\t\t\t\t<CellInputElement\r\n\t\t\t\t\tcords={[rowIndex, cellIndex]}\r\n\t\t\t\t\tboard={board}\r\n\t\t\t\t\tsolution={solution}\r\n\t\t\t\t\tpopupState={popupState}\r\n\t\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\t\t{...bindToggle(popupState)}\r\n\t\t\t\t/>\r\n\t\t\t\t{isOpen && (\r\n\t\t\t\t\t<Popper {...bindPopper(popupState)} transition disablePortal={true}>\r\n\t\t\t\t\t\t{({ TransitionProps }) => (\r\n\t\t\t\t\t\t\t<Grow {...TransitionProps} timeout={500}>\r\n\t\t\t\t\t\t\t\t<Picker\r\n\t\t\t\t\t\t\t\t\tcords={[rowIndex, cellIndex]}\r\n\t\t\t\t\t\t\t\t\tboard={board}\r\n\t\t\t\t\t\t\t\t\tsolution={solution}\r\n\t\t\t\t\t\t\t\t\t// popupState={popupState}\r\n\t\t\t\t\t\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grow>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Popper>\r\n\t\t\t\t)}\r\n\t\t\t</CellInputDiv>\r\n\t\t</ClickAwayListener>\r\n\t);\r\n};\r\n\r\nexport default SudokuEmptyCell;\r\n","import React from 'react';\r\nimport { CellDiv, InvalidSpan, ValidSpan } from './Style';\r\nimport { SudoCellProps } from '../types';\r\nimport SudokuInputCell from './SudokuInputCell/SudokuInputCell';\r\nimport { useSelector } from 'react-redux';\r\nimport { getSudokuSelector } from '../sudokuSlice';\r\n\r\nexport const SudokuCell = ({\r\n\trowIndex,\r\n\tcellIndex,\r\n\tcell,\r\n\tboard,\r\n}: SudoCellProps): JSX.Element => {\r\n\tconst isValidating = useSelector(getSudokuSelector).validating;\r\n\r\n\treturn (\r\n\t\t<CellDiv\r\n\t\t\tclassName=\"sudoku-cell\"\r\n\t\t\tdata-cord={[rowIndex, cellIndex]}\r\n\t\t\tkey={`row${rowIndex}col${cellIndex}`}\r\n\t\t>\r\n\t\t\t{cell.isStatic && cell.value}\r\n\t\t\t{cell.value !== 0 && !cell.isValid && isValidating && (\r\n\t\t\t\t<InvalidSpan>{cell.value}</InvalidSpan>\r\n\t\t\t)}\r\n\t\t\t{!cell.isStatic && cell.isValid && isValidating && (\r\n\t\t\t\t<ValidSpan>{cell.value}</ValidSpan>\r\n\t\t\t)}\r\n\t\t\t{!cell.isStatic && !isValidating && (\r\n\t\t\t\t<SudokuInputCell\r\n\t\t\t\t\trowIndex={rowIndex}\r\n\t\t\t\t\tcellIndex={cellIndex}\r\n\t\t\t\t\tboard={board}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</CellDiv>\r\n\t);\r\n};\r\n\r\nexport default SudokuCell;\r\n","import React from 'react';\r\nimport { SudoRowProps } from './types';\r\nimport SudokuCell from './SudokuCell/SudokuCell';\r\n\r\nexport const SudokuRow = ({ rowIndex, board }: SudoRowProps): JSX.Element => {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{board[rowIndex].map((cell, cellIndex: number) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<SudokuCell\r\n\t\t\t\t\t\trowIndex={rowIndex}\r\n\t\t\t\t\t\tcellIndex={cellIndex}\r\n\t\t\t\t\t\tcell={cell}\r\n\t\t\t\t\t\tboard={board}\r\n\t\t\t\t\t\tkey={`row${rowIndex}col${cellIndex}`}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default SudokuRow;\r\n","import { NumberBoard, Board, SudokuType } from '../Sudoku/types';\r\nimport { HTMLInputEvent } from '../SudokuOptions/types';\r\nimport { getSudoku, getUserSudoku } from '../../utils/sudokuFunctions';\r\n\r\nexport const handleNewGame = (\r\n\tsetNewSudoku: (board: Board, solution: NumberBoard) => void,\r\n\tuserSudoku?: SudokuType\r\n): void => {\r\n\tconst newSudoku = userSudoku || getSudoku();\r\n\tsetNewSudoku(newSudoku.board, newSudoku.solution);\r\n};\r\n\r\nexport const handleValidateSudoku = (\r\n\tisValidating: boolean,\r\n\tsetValidating: (isValidating: boolean) => void\r\n): void => {\r\n\tsetValidating(!isValidating);\r\n};\r\n\r\nexport const handleValidateFullBoard = (board: Board): void => {\r\n\tif (board.every((row) => row.every((cell) => cell.isValid))) {\r\n\t\talert('Sudoku solved correctly');\r\n\t}\r\n};\r\n\r\nexport const handleUploadBoard = (\r\n\te: HTMLInputEvent,\r\n\tsetNewSudoku: (board: Board, solution: NumberBoard) => void\r\n): void => {\r\n\tconst reader = new FileReader();\r\n\tconst file = e.target.files![0];\r\n\treader.readAsText(file);\r\n\treader.onloadend = (e) => {\r\n\t\tif (e.target?.result) {\r\n\t\t\tconst userInput: string | ArrayBuffer | null = reader.result;\r\n\t\t\tif (typeof userInput === 'string') {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst userSudoku = getUserSudoku(userInput);\r\n\t\t\t\t\tif (!userSudoku.solution) {\r\n\t\t\t\t\t\talert('Board is not solvable!');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\thandleNewGame(setNewSudoku, userSudoku);\r\n\t\t\t\t\talert('User board set correctly!');\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\talert('Invalid user board !');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Board, NumberBoard } from '../Sudoku/types';\r\nimport { SudoOptionsProps, HTMLInputEvent } from './types';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport styled from 'styled-components';\r\nimport {\r\n\thandleNewGame,\r\n\thandleValidateSudoku,\r\n\thandleValidateFullBoard,\r\n\thandleUploadBoard,\r\n} from './index';\r\nimport { useAppDispatch } from '../App/context/store.hooks';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n\tgetSudokuSelector,\r\n\tsetValidate,\r\n\tsetSudoku,\r\n} from '../Sudoku/sudokuSlice';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\troot: {\r\n\t\t\t'& > *': {\r\n\t\t\t\tmargin: theme.spacing(2),\r\n\t\t\t\t// position: 'static',\r\n\t\t\t},\r\n\t\t},\r\n\t})\r\n);\r\n\r\nconst Input = styled('input')({\r\n\tdisplay: 'none',\r\n});\r\n\r\nexport const SudokuOptions = ({ board }: SudoOptionsProps): JSX.Element => {\r\n\tconst classes = useStyles();\r\n\tconst isValidating = useSelector(getSudokuSelector).validating;\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\tconst setValidating = (isValidating: boolean) => {\r\n\t\tdispatch(setValidate(isValidating));\r\n\t};\r\n\tconst setNewSudoku = (board: Board, solution: NumberBoard) => {\r\n\t\tdispatch(setSudoku({ board, solution }));\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\thandleValidateFullBoard(board);\r\n\t}, [board]);\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Button\r\n\t\t\t\tcolor=\"primary\"\r\n\t\t\t\tvariant=\"contained\"\r\n\t\t\t\tdisableElevation\r\n\t\t\t\tonClick={() => handleNewGame(setNewSudoku)}\r\n\t\t\t>\r\n\t\t\t\tNew Game\r\n\t\t\t</Button>\r\n\t\t\t<Button\r\n\t\t\t\tcolor=\"primary\"\r\n\t\t\t\tvariant=\"contained\"\r\n\t\t\t\tdisableElevation\r\n\t\t\t\tonClick={() => handleValidateSudoku(isValidating, setValidating)}\r\n\t\t\t>\r\n\t\t\t\t{isValidating ? 'Return' : 'Validate'}\r\n\t\t\t</Button>{' '}\r\n\t\t\t<div>\r\n\t\t\t\t<label htmlFor=\"contained-button-file\">\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\taccept=\".json\"\r\n\t\t\t\t\t\tid=\"contained-button-file\"\r\n\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t// HTMLInputEvent type is not working with File Input as MUI Button.\r\n\t\t\t\t\t\tonChange={(e: any) => handleUploadBoard(e, setNewSudoku)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\tcomponent=\"span\"\r\n\t\t\t\t\t\tdisableElevation\r\n\t\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tUpload Board\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SudokuOptions;\r\n","import React from 'react';\r\nimport { Wrapper, SudokuBoard } from './Styles';\r\nimport { Cell } from './types';\r\nimport SudokuRow from './SudokuRow';\r\nimport SudokuOptions from '../SudokuOptions/SudokuOptions';\r\nimport { useSelector } from 'react-redux';\r\nimport { getSudokuSelector } from './sudokuSlice';\r\n\r\nexport const Sudoku = (): JSX.Element => {\r\n\tconst board = useSelector(getSudokuSelector).board;\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<SudokuBoard>\r\n\t\t\t\t{board &&\r\n\t\t\t\t\tboard.map((row: Cell[], rowIndex: number) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<SudokuRow\r\n\t\t\t\t\t\t\t\trowIndex={rowIndex}\r\n\t\t\t\t\t\t\t\tboard={board}\r\n\t\t\t\t\t\t\t\tkey={`row${rowIndex}`}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t</SudokuBoard>\r\n\t\t\t<SudokuOptions board={board} />\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nexport default Sudoku;\r\n","import React from 'react';\nimport './App.scss';\nimport Sudoku from '../Sudoku/Sudoku';\n\nexport const App = (): JSX.Element => {\n\treturn (\n\t\t<div className=\"App sudoku-wrapper\">\n\t\t\t<Sudoku />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { sudokuReducer } from '../../Sudoku/sudokuSlice';\r\n// import preloadedState from './preloadedState';\r\n\r\nconst reducer = {\r\n\tsudoku: sudokuReducer,\r\n};\r\n\r\nconst store = configureStore({\r\n\treducer,\r\n\t// middleware: (getDefaultMiddleware) => getDefaultMiddleware(),\r\n\t// devTools: process.env.NODE_ENV !== 'production',\r\n\t// preloadedState,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","/* eslint-disable prettier/prettier */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './components/App/context/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>,\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}