{"version":3,"sources":["components/Sudoku/BoxWrapper/BoxWrapper.tsx","components/Sudoku/SudokuCell/index.ts","components/Sudoku/SudokuCell/SudokuEmptyCell/CellInputElement.tsx","components/Sudoku/SudokuCell/Picker/Picker.tsx","components/Sudoku/SudokuCell/SudokuEmptyCell/SudokuEmptyCell.tsx","components/Sudoku/SudokuCell/SudokuCell.tsx","components/Sudoku/SudokuRow.tsx","utils/solverFunction.ts","utils/sudokuFunctions.ts","components/SudokuOptions/index.ts","components/SudokuOptions/SudokuOptions.tsx","components/Sudoku/Sudoku.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Box","className","BoxWrapper","board","map","uuid","assignValueToCell","value","cords","setBoard","x","y","updatedBoard","Object","assign","CellInput","col","row","inputRef","popupState","Fragment","type","maxLength","data-cord","ref","bindToggle","onInput","e","currentTarget","getAttribute","isNaN","onCellInput","Picker","Popper","bindPopper","transition","disablePortal","TransitionProps","Grow","timeout","array","index","element","PickerTile","role","onClick","current","parentNode","val","innerHTML","onPickerClick","SudokuEmptyCell","useState","isOpen","setIsOpen","useRef","handleClickAway","handleClick","open","variant","popupId","ClickAwayListener","onClickAway","SudokuCell","SudokuRow","solveUserBoard","i","j","checkForSolved","allPossibilities","getAllPossibleBoards","candidates","filterCandidates","searchForSolution","length","currentCandidate","shift","currentCheck","filtered","checkBoard","push","emptySquare","getFirstEmptySquare","undefined","yCord","xCord","n","newCandidate","checkRows","checkColumns","checkBoxes","used","includes","startingBoxCords","getSudoku","raw","makepuzzle","rawSolution","solvepuzzle","getFormattedBoard","solution","getFormattedSolution","formatBoard","solutionBoard","unformatted","getUserSudoku","userInput","formatted","formatUserBoard","JSON","parse","validateSudokuBoard","printErrors","forEach","handleNewGame","setSudoku","setCandidate","setValidating","userSudoku","newSudoku","handleValidateFullBoard","every","arr","el","candidate","alert","console","log","alertSudokuValidation","useStyles","makeStyles","theme","createStyles","root","margin","spacing","SudokuOptions","classes","isValidating","useEffect","Button","color","handleValidateSudoku","size","prompt","error","handleFetchBoard","Sudoku","sudokuGame","sudoku","setSolution","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iWAcMA,EAAM,WACX,OAAO,qBAAKC,UAAU,gBAGRC,EAbW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACzB,qBAAKF,UAAU,qBAAf,SACEE,GACAA,EAAMC,KAAI,WACT,OAAO,cAAC,EAAD,GAAUC,wB,0CCsBfC,G,MAAoB,SACzBC,EACAJ,EACAK,EACAC,GAEA,IAAMC,EAAIF,EAAM,GACVG,EAAIH,EAAM,GACVI,EAAeC,OAAOC,OAAOX,GACnCS,EAAaD,GAAGD,GAAKH,EACrBE,EAASG,KCbKG,EAtBU,SAAC,GAOe,IANxCC,EAMuC,EANvCA,IACAC,EAKuC,EALvCA,IACAd,EAIuC,EAJvCA,MACAe,EAGuC,EAHvCA,SACAC,EAEuC,EAFvCA,WACAV,EACuC,EADvCA,SAEA,OACC,cAAC,IAAMW,SAAP,UACC,+CACCC,KAAK,MACLC,UAAW,EACXC,YAAW,CAACN,EAAKD,GACjBQ,IAAKN,GACDO,qBAAWN,IALhB,IAMCO,QAAS,SAACC,GAAD,ODpBc,SAC1BA,EACAxB,EACAM,GAEA,IAAMD,EAAQmB,EAAEC,cAAcC,aAAa,aACvCC,OAAOH,EAAEC,cAAcrB,OAC1BoB,EAAEC,cAAcrB,MAAQ,GAGrBJ,GAASK,GACZF,GAAmBqB,EAAEC,cAAcrB,MAAOJ,EAAOK,EAAOC,GCStCsB,CAAYJ,EAAGxB,EAAOM,U,wBCgB3BuB,EA7BO,SAAC,GAKU,IAJhCd,EAI+B,EAJ/BA,SACAf,EAG+B,EAH/BA,MACAgB,EAE+B,EAF/BA,WACAV,EAC+B,EAD/BA,SAEA,OACC,cAACwB,EAAA,EAAD,2BAAYC,qBAAWf,IAAvB,IAAoCgB,YAAU,EAACC,eAAe,EAA9D,SACE,gBAAGC,EAAH,EAAGA,gBAAH,OACA,cAACC,EAAA,EAAD,2BAAUD,GAAV,IAA2BE,QAAS,IAApC,SACC,qBAAKtC,UAAU,gBAAf,SACEE,EAAMC,KAAI,SAACoC,EAAOC,GAClB,OACC,cAAC,EAAD,CACCC,QAASD,EAETvB,SAAUA,EACVf,MAAOA,EACPM,SAAUA,GAHLJ,+BAgBRsC,EAAa,SAAC,GAKiB,IAJpCD,EAImC,EAJnCA,QACAxB,EAGmC,EAHnCA,SACAf,EAEmC,EAFnCA,MACAM,EACmC,EADnCA,SAEA,OACC,qBACCmC,KAAK,SACL3C,UAAU,oBACV4C,QAAS,SAAClB,GAAD,OFjCiB,SAC5BA,EACAxB,EACAe,EACAT,GAEA,IAAMD,EAAQU,EAAS4B,QAAQC,WAAWA,WAAWlB,aACpD,aAEKmB,EAAMrB,EAAEC,cAAcqB,UAC5B/B,EAAS4B,QAAQvC,MAAQyC,EACzB1C,GAAmB0C,EAAK7C,EAAOK,EAAOC,GEsBpByC,CAAcvB,EAAGxB,EAAOe,EAAUT,IAHnD,SAKEiC,EAAU,KCNCS,EAvCgB,SAAC,GAKQ,IAJvCnC,EAIsC,EAJtCA,IACAC,EAGsC,EAHtCA,IACAd,EAEsC,EAFtCA,MACAM,EACsC,EADtCA,SACsC,EACV2C,oBAAkB,GADR,mBAC/BC,EAD+B,KACvBC,EADuB,KAEhCpC,EAAWqC,iBAAgC,MAC3CC,EAAkB,kBAAYF,GAAU,IACxCG,EAAc,kBAAYH,GAAU,SAACI,GAAD,OAAWA,MAErD,OACC,cAAC,IAAD,CAAYC,QAAQ,SAASC,QAAQ,gBAArC,SACE,SAACzC,GAAD,OACA,cAAC0C,EAAA,EAAD,CAAmBC,YAAaN,EAAhC,SACC,sBAAKvD,UAAU,wBAAwB4C,QAASY,EAAhD,UACC,cAAC,EAAD,CACCzC,IAAKA,EACLC,IAAKA,EACLd,MAAOA,EACPe,SAAUA,EACVC,WAAYA,EACZV,SAAUA,IAEV4C,GACA,cAAC,EAAD,CACClD,MAAOA,EACPe,SAAUA,EACVC,WAAYA,EACZV,SAAUA,aCFHsD,EAzBW,SAAC,GAMQ,IALlC/C,EAKiC,EALjCA,IACAC,EAIiC,EAJjCA,IACAyB,EAGiC,EAHjCA,QACAvC,EAEiC,EAFjCA,MACAM,EACiC,EADjCA,SAEA,OACC,sBAAKR,UAAU,cAAcsB,YAAW,CAACN,EAAKD,GAA9C,UAXqB,IAYnB0B,GAXqB,KAWSA,GAAgCA,EAXzC,KAYrBA,GACA,sBAAMzC,UAAU,yBAAhB,eAdmB,IAgBnByC,GACA,cAAC,EAAD,CACC1B,IAAKA,EACLC,IAAKA,EACLd,MAAOA,EACPM,SAAUA,MAV4CJ,mBCY5C2D,EAxBU,SAAC,GAKQ,IAJjCxB,EAIgC,EAJhCA,MACAvB,EAGgC,EAHhCA,IACAd,EAEgC,EAFhCA,MACAM,EACgC,EADhCA,SAEA,OACC,cAAC,IAAMW,SAAP,UACEoB,EAAMpC,KAAI,SAACsC,EAAS1B,GACpB,OACC,cAAC,EAAD,CAECA,IAAKA,EACLC,IAAKA,EACLyB,QAASA,EACTvC,MAAOA,EACPM,SAAUA,GALLJ,wB,gBCdE4D,EAAiB,SAAC9D,GAE9B,GASD,SAAwBA,GACvB,IAAK,IAAI+D,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACtB,GAAoB,IAAhBhE,EAAM+D,GAAGC,GACZ,OAAO,EAIV,OAAO,EAjBHC,CAAejE,GAClB,OAAOA,EAEP,IAAMkE,EAAmBC,EAAqBnE,GACxCoE,EAAaC,EAAiBH,GACpC,OAAOI,EAAkBF,IAe3B,IAAME,EAAoB,SAApBA,EAAqBF,GAC1B,GAAIA,EAAWG,OAAS,EACvB,OAAO,EAEP,IAAMC,EAAmBJ,EAAWK,QAC9BC,EAAeZ,EAAeU,GACpC,OAAqB,IAAjBE,EACIA,EAEAJ,EAAkBF,IAKtBC,EAAmB,SAACD,GACzB,IAAMO,EAAW,GACjB,GAAKP,EAAL,CACA,IAAK,IAAIL,EAAI,EAAGA,EAAIK,EAAWG,OAAQR,IAClCa,EAAWR,EAAWL,KACzBY,EAASE,KAAKT,EAAWL,IAG3B,OAAOY,IAGFR,EAAuB,SAACnE,GAC7B,IAAMoE,EAAa,GACbU,EAAcC,EAAoB/E,GACxC,QAAoBgF,IAAhBF,EAGH,IAFA,IAAMG,EAAQH,EAAY,GACpBI,EAAQJ,EAAY,GACjBK,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC5B,IAAMC,EAAY,YAAOpF,GACnBc,EAAG,YAAOsE,EAAaH,IAC7BnE,EAAIoE,GAASC,EACbC,EAAaH,GAASnE,EACtBsD,EAAWS,KAAKO,GAGlB,OAAOhB,GAGFW,EAAsB,SAAC/E,GAC5B,IAAK,IAAI+D,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACtB,GAAoB,IAAhBhE,EAAM+D,GAAGC,GACZ,MAAO,CAACD,EAAGC,IAMTY,EAAa,SAAC5E,GACnB,GAAIqF,EAAUrF,IAAUsF,EAAatF,IAAUuF,EAAWvF,GAAQ,OAAO,GAGpEqF,EAAY,SAACrF,GAClB,IAAK,IAAIc,EAAM,EAAGA,EAAMd,EAAMuE,OAAQzD,IAErC,IADA,IAAM0E,EAAiB,GACdzB,EAAI,EAAGA,EAAI/D,EAAMuE,OAAQR,IAAK,CACtC,IAAM3D,EAAQJ,EAAMc,GAAKiD,GACzB,GAAIyB,EAAKC,SAASrF,GACjB,OAAO,EACa,IAAVA,GACVoF,EAAKX,KAAKzE,GAIb,OAAO,GAGFkF,EAAe,SAACtF,GACrB,IAAK,IAAIa,EAAM,EAAGA,EAAMb,EAAMuE,OAAQ1D,IAErC,IADA,IAAM2E,EAAiB,GACdzB,EAAI,EAAGA,EAAI/D,EAAMuE,OAAQR,IAAK,CACtC,IAAM3D,EAAQJ,EAAM+D,GAAGlD,GACvB,GAAI2E,EAAKC,SAASrF,GACjB,OAAO,EACa,IAAVA,GACVoF,EAAKX,KAAKzE,GAIb,OAAO,GAGFmF,EAAa,SAACvF,GAanB,IAZA,IAAM0F,EAAmB,CACxB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAGI5E,EAAM,EAAGA,EAAMd,EAAMuE,OAAQzD,GAAO,EAC5C,IAAK,IAAID,EAAM,EAAGA,EAAMb,EAAMuE,OAAQ1D,GAAO,EAE5C,IADA,IAAM2E,EAAiB,GACdzB,EAAI,EAAGA,EAAI/D,EAAMuE,OAAQR,IAAK,CACtC,IAAMkB,EAAQS,EAAiB3B,GAAG,GAAKjD,EACjCoE,EAAQQ,EAAiB3B,GAAG,GAAKlD,EACjCT,EAAQJ,EAAMiF,GAAOC,GAC3B,GAAIM,EAAKC,SAASrF,GACjB,OAAO,EACa,IAAVA,GACVoF,EAAKX,KAAKzE,GAKd,OAAO,GCpIKuF,EAAY,WACxB,IAAMC,EAAMC,uBACNC,EAAcC,sBAAYH,GAMhC,MAJe,CACd5F,MAAOgG,EAAkBJ,GACzBK,SAAUC,EAAqBJ,KAK3BE,EAAoB,SAACJ,GAC1B,IAAM5F,EAAQ4F,EAAI3F,KAAI,SAACuB,GAAD,OAAsB,OAANA,EAAa,EAAIA,EAAI,KAC3D,OAAO2E,EAAYnG,IAGdkG,EAAuB,SAACJ,GAC7B,IAAMM,EAAgBN,EAAY7F,KAAI,SAACuB,GAAD,OAAeA,EAAI,KACzD,OAAO2E,EAAYC,IAGdD,EAAc,SAACE,GAEpB,IADA,IAAMrG,EAAoB,GACjB+D,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE3B,IADA,IAAMjD,EAAgB,GACbkD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3B,IACMnD,EADQwF,EAAgB,EAAJtC,EAAQC,GAElClD,EAAI+D,KAAKhE,GAEVb,EAAM6E,KAAK/D,GAEZ,OAAOd,GAgBKsG,EAAgB,SAACC,GAC7B,IACMC,EAfwB,SAACxG,GAE/B,IADA,IAAMwG,EAAS,YAAOxG,GACb+D,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACE,OAApBwC,EAAUzC,GAAGC,IAChBwC,EAAUzC,GAAGC,GAIhB,OAAOwC,EAMWC,CADOC,KAAKC,MAAMJ,GAAWvG,OAG/C,MAAO,CACNA,MAAOwG,EACPP,SAHgBnC,EAAe0C,KAOpBI,EAAsB,SAClC5G,EACA6G,EACAZ,GAaA,OAXAjG,EAAM8G,SAAQ,SAACzE,EAAiB7B,GAC/B6B,EAAMyE,SAAQ,SAACvE,EAAiBhC,GAC3BsG,GAAeZ,EACd1D,IAAY0D,EAASzF,GAAGD,IAAkB,IAAZgC,IACjCvC,EAAMQ,GAAGD,GAAK,IAGGP,EAAMQ,GAAGD,GAAf,KAAZgC,EAAgC,EAAoBA,QAIhDvC,GCxEK+G,EAAgB,SAC5BC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAYD,GAAcxB,IAChCqB,EAAUI,GACVH,EAAaG,EAAUpH,OACvBkH,GAAc,IAsBFG,EAA0B,SACtCrH,EACAiG,GAEIjG,EAAMsH,OAAM,SAACC,GAAD,OAASA,EAAID,OAAM,SAACE,GAAD,OAAe,IAAPA,SDwCP,SACpCC,EACAxB,GAEIwB,EAAUH,OAAM,SAACjF,EAAOC,GAAR,OAAkBD,IAAU4D,EAAS3D,MACxDoF,MAAM,+CAENC,QAAQC,IAAIH,GACZC,MAAM,iCC/CNG,CAAsB7H,EAAOiG,I,yBChCzB6B,EAAYC,aAAW,SAACC,GAAD,OAC5BC,YAAa,CACZC,KAAM,CACL,QAAS,CACRC,OAAQH,EAAMI,QAAQ,UAiEXC,EA1Dc,SAAC,GAKQ,IAJrCpC,EAIoC,EAJpCA,SACAjG,EAGoC,EAHpCA,MACAM,EAEoC,EAFpCA,SACA0G,EACoC,EADpCA,UAEMsB,EAAUR,IADoB,EAEF7E,mBAASjD,GAFP,mBAE7ByH,EAF6B,KAElBR,EAFkB,OAGEhE,oBAAS,GAHX,mBAG7BsF,EAH6B,KAGfrB,EAHe,KASpC,OAJAsB,qBAAU,WACTnB,EAAwBrH,EAAOiG,KAC7B,CAACjG,IAGH,yBAASF,UAAU,sBAAnB,SACC,sBAAKA,UAAWwI,EAAQJ,KAAxB,UACC,cAACO,EAAA,EAAD,CACCC,MAAM,UACNlF,QAAQ,YACRd,QAAS,kBAAMqE,EAAcC,EAAWC,EAAcC,IAHvD,sBAOA,cAACuB,EAAA,EAAD,CACCC,MAAM,UACNlF,QAAQ,YACRd,QAAS,kBD9BsB,SACnC1C,EACAiG,EACAwB,EACAc,EACAjI,EACA2G,EACAC,GAEKqB,GAIJtB,EAAavG,OAAOC,OAAOX,IAC3BM,EAASsG,EAAoBa,GAAW,MAJxCR,EAAavG,OAAOC,OAAOX,IAC3BM,EAASsG,EAAoBa,GAAW,EAAMxB,KAK/CiB,GAAc,SAACqB,GAAD,OAAmBA,KCe5BI,CACC3I,EACAiG,EACAwB,EACAc,EACAjI,EACA2G,EACAC,IAXH,SAeEqB,EAAe,SAAW,aAClB,IACV,8BACC,cAACE,EAAA,EAAD,CACCC,MAAM,YACNlF,QAAQ,YACRoF,KAAK,QACLlG,QAAS,YDrBiB,SAC/BsE,EACAC,EACAC,GAEA,IAAMX,EAAYsC,OAAO,sCACzB,GAAyB,kBAAdtC,GAAwC,KAAdA,EACrC,IACC,IAAMY,EAAab,EAAcC,GACjC,IAAKY,EAAWlB,SAEf,YADAyB,MAAM,0BAGPX,EAAcC,EAAWC,EAAcC,EAAeC,GACtDO,MAAM,+BACL,MAAOlG,GACRkG,MAAM,wBACNC,QAAQmB,MAAMtH,ICKTuH,CAAiB/B,EAAWC,EAAcC,IAL5C,iCChBU8B,EAxCO,WACrB,IAAMC,EAAatD,IADqB,EAEZ1C,mBAAqBgG,GAFT,mBAEjCC,EAFiC,KAEzBlC,EAFyB,OAGd/D,mBAAQ,YAAYiG,EAAOlJ,QAHb,mBAGjCA,EAHiC,KAG1BM,EAH0B,OAIR2C,mBAAgBiG,EAAOjD,UAJf,mBAIjCA,EAJiC,KAIvBkD,EAJuB,KAWxC,OALAX,qBAAU,WACTlI,EAAS,YAAI4I,EAAOlJ,QACpBmJ,EAAYD,EAAOjD,YACjB,CAACiD,IAGH,sBAAKpJ,UAAU,mBAAf,UACC,cAAC,EAAD,CAAYE,MAAOA,IACnB,qBAAKF,UAAU,uBAAf,SACC,qBAAKA,UAAU,eAAf,SACEE,GACAA,EAAMC,KAAI,SAACoC,EAAOvB,GACjB,OACC,cAAC,EAAD,CACCuB,MAAOA,EACPvB,IAAKA,EACLd,MAAOA,EACPM,SAAUA,GACLJ,yBAMX,cAAC,EAAD,CACCF,MAAOA,EACPiG,SAAUA,EACV3F,SAAUA,EACV0G,UAAWA,QC/BAoC,EARI,WAClB,OACC,qBAAKtJ,UAAU,qBAAf,SACC,cAAC,EAAD,OCOYuJ,EAZS,SAACC,GACpBA,GAAeA,aAAuBC,UACzC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJXQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAGzBb,M","file":"static/js/main.823655ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport './BoxWrapper.scss';\r\nimport { uuid } from 'uuidv4';\r\nimport { BoxWrapProps } from '../types';\r\n\r\nexport const BoxWrapper = ({ board }: BoxWrapProps): JSX.Element => (\r\n\t<div className=\"sudoku-box-wrapper\">\r\n\t\t{board &&\r\n\t\t\tboard.map(() => {\r\n\t\t\t\treturn <Box key={uuid()} />;\r\n\t\t\t})}\r\n\t</div>\r\n);\r\n\r\nconst Box = (): JSX.Element => {\r\n\treturn <div className=\"sudoku-box\"></div>;\r\n};\r\n\r\nexport default BoxWrapper;\r\n","import { Board } from '../types';\r\n\r\nexport const onCellInput = (\r\n\te: React.SyntheticEvent<HTMLInputElement>,\r\n\tboard: Board,\r\n\tsetBoard: React.Dispatch<React.SetStateAction<Board>>\r\n): void => {\r\n\tconst cords = e.currentTarget.getAttribute('data-cord');\r\n\tif (isNaN(+e.currentTarget.value)) {\r\n\t\te.currentTarget.value = '';\r\n\t\treturn;\r\n\t}\r\n\tif (board && cords) {\r\n\t\tassignValueToCell(+e.currentTarget.value, board, cords, setBoard);\r\n\t}\r\n};\r\n\r\nexport const onPickerClick = (\r\n\te: React.MouseEvent<HTMLDivElement>,\r\n\tboard: Board,\r\n\tinputRef: React.MutableRefObject<any>,\r\n\tsetBoard: React.Dispatch<React.SetStateAction<Board>>\r\n): void => {\r\n\tconst cords = inputRef.current.parentNode.parentNode.getAttribute(\r\n\t\t'data-cord'\r\n\t);\r\n\tconst val = e.currentTarget.innerHTML;\r\n\tinputRef.current.value = val;\r\n\tassignValueToCell(+val, board, cords, setBoard);\r\n};\r\n\r\nconst assignValueToCell = (\r\n\tvalue: number,\r\n\tboard: Board,\r\n\tcords: string,\r\n\tsetBoard: React.Dispatch<React.SetStateAction<Board>>\r\n): void => {\r\n\tconst x = cords[2];\r\n\tconst y = cords[0];\r\n\tconst updatedBoard = Object.assign(board);\r\n\tupdatedBoard[y][x] = value;\r\n\tsetBoard(updatedBoard);\r\n};\r\n","import React from 'react';\r\nimport './CellInputElement.scss';\r\nimport { bindToggle } from 'material-ui-popup-state';\r\nimport { CellInpElementProps } from '../../types';\r\nimport { onCellInput } from '../index';\r\n\r\nexport const CellInput = ({\r\n\tcol,\r\n\trow,\r\n\tboard,\r\n\tinputRef,\r\n\tpopupState,\r\n\tsetBoard,\r\n}: CellInpElementProps): JSX.Element => {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"tel\"\r\n\t\t\t\tmaxLength={1}\r\n\t\t\t\tdata-cord={[row, col]}\r\n\t\t\t\tref={inputRef}\r\n\t\t\t\t{...bindToggle(popupState)}\r\n\t\t\t\tonInput={(e) => onCellInput(e, board, setBoard)}\r\n\t\t\t></input>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default CellInput;\r\n","import React from 'react';\r\nimport './Picker.scss';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport { bindPopper } from 'material-ui-popup-state';\r\nimport { PickerProps, PickerTileProps } from '../../types';\r\nimport { onPickerClick } from '../index';\r\nimport { uuid } from 'uuidv4';\r\n\r\nexport const Picker = ({\r\n\tinputRef,\r\n\tboard,\r\n\tpopupState,\r\n\tsetBoard,\r\n}: PickerProps): JSX.Element => {\r\n\treturn (\r\n\t\t<Popper {...bindPopper(popupState)} transition disablePortal={true}>\r\n\t\t\t{({ TransitionProps }) => (\r\n\t\t\t\t<Grow {...TransitionProps} timeout={500}>\r\n\t\t\t\t\t<div className=\"sudoku-picker\">\r\n\t\t\t\t\t\t{board.map((array, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<PickerTile\r\n\t\t\t\t\t\t\t\t\telement={index}\r\n\t\t\t\t\t\t\t\t\tkey={uuid()}\r\n\t\t\t\t\t\t\t\t\tinputRef={inputRef}\r\n\t\t\t\t\t\t\t\t\tboard={board}\r\n\t\t\t\t\t\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Grow>\r\n\t\t\t)}\r\n\t\t</Popper>\r\n\t);\r\n};\r\n\r\nexport default Picker;\r\n\r\nconst PickerTile = ({\r\n\telement,\r\n\tinputRef,\r\n\tboard,\r\n\tsetBoard,\r\n}: PickerTileProps): JSX.Element => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\trole=\"button\"\r\n\t\t\tclassName=\"sudoku-picker-box\"\r\n\t\t\tonClick={(e) => onPickerClick(e, board, inputRef, setBoard)}\r\n\t\t>\r\n\t\t\t{element + 1}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport PopupState from 'material-ui-popup-state';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { SudoEmptyCellProps } from '../../types';\r\nimport CellInputElement from './CellInputElement';\r\nimport Picker from '../Picker/Picker';\r\n\r\nexport const SudokuEmptyCell = ({\r\n\tcol,\r\n\trow,\r\n\tboard,\r\n\tsetBoard,\r\n}: SudoEmptyCellProps): JSX.Element => {\r\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\r\n\tconst inputRef = useRef<HTMLInputElement | null>(null);\r\n\tconst handleClickAway = (): void => setIsOpen(false);\r\n\tconst handleClick = (): void => setIsOpen((open) => !open);\r\n\r\n\treturn (\r\n\t\t<PopupState variant=\"popper\" popupId=\"sudoku-popper\">\r\n\t\t\t{(popupState) => (\r\n\t\t\t\t<ClickAwayListener onClickAway={handleClickAway}>\r\n\t\t\t\t\t<div className=\"sudoku-cell-input-div\" onClick={handleClick}>\r\n\t\t\t\t\t\t<CellInputElement\r\n\t\t\t\t\t\t\tcol={col}\r\n\t\t\t\t\t\t\trow={row}\r\n\t\t\t\t\t\t\tboard={board}\r\n\t\t\t\t\t\t\tinputRef={inputRef}\r\n\t\t\t\t\t\t\tpopupState={popupState}\r\n\t\t\t\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{isOpen && (\r\n\t\t\t\t\t\t\t<Picker\r\n\t\t\t\t\t\t\t\tboard={board}\r\n\t\t\t\t\t\t\t\tinputRef={inputRef}\r\n\t\t\t\t\t\t\t\tpopupState={popupState}\r\n\t\t\t\t\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</ClickAwayListener>\r\n\t\t\t)}\r\n\t\t</PopupState>\r\n\t);\r\n};\r\n\r\nexport default SudokuEmptyCell;\r\n","import React from 'react';\r\nimport './SudokuCell.scss';\r\nimport { SudoCellProps } from '../types';\r\nimport SudokuEmptyCell from './SudokuEmptyCell/SudokuEmptyCell';\r\nimport { uuid } from 'uuidv4';\r\n\r\nconst emptyCellValue = 0;\r\nconst errorCellElement = 10;\r\n\r\nexport const SudokuCell = ({\r\n\tcol,\r\n\trow,\r\n\telement,\r\n\tboard,\r\n\tsetBoard,\r\n}: SudoCellProps): JSX.Element => {\r\n\treturn (\r\n\t\t<div className=\"sudoku-cell\" data-cord={[row, col]} key={uuid()}>\r\n\t\t\t{element !== emptyCellValue && element !== errorCellElement && element}\r\n\t\t\t{element === errorCellElement && (\r\n\t\t\t\t<span className=\"sudoku-invalid-element\">x</span>\r\n\t\t\t)}\r\n\t\t\t{element === emptyCellValue && (\r\n\t\t\t\t<SudokuEmptyCell\r\n\t\t\t\t\tcol={col}\r\n\t\t\t\t\trow={row}\r\n\t\t\t\t\tboard={board}\r\n\t\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SudokuCell;\r\n","import React from 'react';\r\nimport { SudoRowProps } from './types';\r\nimport SudokuCell from './SudokuCell/SudokuCell';\r\nimport { uuid } from 'uuidv4';\r\n\r\nexport const SudokuRow = ({\r\n\tarray,\r\n\trow,\r\n\tboard,\r\n\tsetBoard,\r\n}: SudoRowProps): JSX.Element => {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{array.map((element, col: number) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<SudokuCell\r\n\t\t\t\t\t\tkey={uuid()}\r\n\t\t\t\t\t\tcol={col}\r\n\t\t\t\t\t\trow={row}\r\n\t\t\t\t\t\telement={element}\r\n\t\t\t\t\t\tboard={board}\r\n\t\t\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default SudokuRow;\r\n","import { Board } from '../components/Sudoku/types';\r\n\r\nexport const solveUserBoard = (board: Board): any => {\r\n\t// only works for 3x3\r\n\tif (checkForSolved(board)) {\r\n\t\treturn board;\r\n\t} else {\r\n\t\tconst allPossibilities = getAllPossibleBoards(board);\r\n\t\tconst candidates = filterCandidates(allPossibilities);\r\n\t\treturn searchForSolution(candidates);\r\n\t}\r\n};\r\n\r\nfunction checkForSolved(board: Board) {\r\n\tfor (let i = 0; i < 9; i++) {\r\n\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\tif (board[i][j] === 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nconst searchForSolution = (candidates: Board[]): Board | boolean => {\r\n\tif (candidates.length < 1) {\r\n\t\treturn false;\r\n\t} else {\r\n\t\tconst currentCandidate = candidates.shift();\r\n\t\tconst currentCheck = solveUserBoard(currentCandidate!);\r\n\t\tif (currentCheck !== false) {\r\n\t\t\treturn currentCheck;\r\n\t\t} else {\r\n\t\t\treturn searchForSolution(candidates);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst filterCandidates = (candidates: Board[]): any => {\r\n\tconst filtered = [];\r\n\tif (!candidates) return;\r\n\tfor (let i = 0; i < candidates.length; i++) {\r\n\t\tif (checkBoard(candidates[i])) {\r\n\t\t\tfiltered.push(candidates[i]);\r\n\t\t}\r\n\t}\r\n\treturn filtered;\r\n};\r\n\r\nconst getAllPossibleBoards = (board: Board): Board[] => {\r\n\tconst candidates = [];\r\n\tconst emptySquare = getFirstEmptySquare(board);\r\n\tif (emptySquare !== undefined) {\r\n\t\tconst yCord = emptySquare[0];\r\n\t\tconst xCord = emptySquare[1];\r\n\t\tfor (let n = 1; n <= 9; n++) {\r\n\t\t\tconst newCandidate = [...board];\r\n\t\t\tconst row = [...newCandidate[yCord]];\r\n\t\t\trow[xCord] = n;\r\n\t\t\tnewCandidate[yCord] = row;\r\n\t\t\tcandidates.push(newCandidate);\r\n\t\t}\r\n\t}\r\n\treturn candidates;\r\n};\r\n\r\nconst getFirstEmptySquare = (board: Board): number[] | undefined => {\r\n\tfor (let i = 0; i < 9; i++) {\r\n\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\tif (board[i][j] === 0) {\r\n\t\t\t\treturn [i, j];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst checkBoard = (board: Board): boolean | undefined => {\r\n\tif (checkRows(board) && checkColumns(board) && checkBoxes(board)) return true;\r\n};\r\n\r\nconst checkRows = (board: Board): boolean => {\r\n\tfor (let row = 0; row < board.length; row++) {\r\n\t\tconst used: number[] = [];\r\n\t\tfor (let i = 0; i < board.length; i++) {\r\n\t\t\tconst value = board[row][i];\r\n\t\t\tif (used.includes(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t} else if (value !== 0) {\r\n\t\t\t\tused.push(value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nconst checkColumns = (board: Board): boolean => {\r\n\tfor (let col = 0; col < board.length; col++) {\r\n\t\tconst used: number[] = [];\r\n\t\tfor (let i = 0; i < board.length; i++) {\r\n\t\t\tconst value = board[i][col];\r\n\t\t\tif (used.includes(value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t} else if (value !== 0) {\r\n\t\t\t\tused.push(value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nconst checkBoxes = (board: Board): boolean => {\r\n\tconst startingBoxCords = [\r\n\t\t[0, 0],\r\n\t\t[0, 1],\r\n\t\t[0, 2],\r\n\t\t[1, 0],\r\n\t\t[1, 1],\r\n\t\t[1, 2],\r\n\t\t[2, 0],\r\n\t\t[2, 1],\r\n\t\t[2, 2],\r\n\t];\r\n\r\n\tfor (let row = 0; row < board.length; row += 3) {\r\n\t\tfor (let col = 0; col < board.length; col += 3) {\r\n\t\t\tconst used: number[] = [];\r\n\t\t\tfor (let i = 0; i < board.length; i++) {\r\n\t\t\t\tconst yCord = startingBoxCords[i][0] + row;\r\n\t\t\t\tconst xCord = startingBoxCords[i][1] + col;\r\n\t\t\t\tconst value = board[yCord][xCord];\r\n\t\t\t\tif (used.includes(value)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else if (value !== 0) {\r\n\t\t\t\t\tused.push(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n","import { Board, SudokuType } from '../components/Sudoku/types';\r\nimport { makepuzzle, solvepuzzle } from 'sudoku';\r\nimport { solveUserBoard } from './solverFunction';\r\n\r\n// type rawBoard = (number | null)[];\r\n\r\nexport const getSudoku = (): SudokuType => {\r\n\tconst raw = makepuzzle();\r\n\tconst rawSolution = solvepuzzle(raw);\r\n\r\n\tconst sudoku = {\r\n\t\tboard: getFormattedBoard(raw),\r\n\t\tsolution: getFormattedSolution(rawSolution),\r\n\t};\r\n\treturn sudoku;\r\n};\r\n\r\nconst getFormattedBoard = (raw: any) => {\r\n\tconst board = raw.map((e: number) => (e === null ? 0 : e + 1));\r\n\treturn formatBoard(board);\r\n};\r\n\r\nconst getFormattedSolution = (rawSolution: any) => {\r\n\tconst solutionBoard = rawSolution.map((e: number) => e + 1);\r\n\treturn formatBoard(solutionBoard);\r\n};\r\n\r\nconst formatBoard = (unformatted: any) => {\r\n\tconst board: number[][] = [];\r\n\tfor (let i = 0; i < 9; i++) {\r\n\t\tconst row: number[] = [];\r\n\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\tconst value = unformatted[i * 9 + j];\r\n\t\t\tconst col: number = value;\r\n\t\t\trow.push(col);\r\n\t\t}\r\n\t\tboard.push(row);\r\n\t}\r\n\treturn board;\r\n};\r\n\r\nexport const formatUserBoard = (board: Board): Board => {\r\n\tconst formatted = [...board];\r\n\tfor (let i = 0; i < 9; i++) {\r\n\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\tif (formatted[i][j] === null) {\r\n\t\t\t\tformatted[i][j] === 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn formatted;\r\n};\r\n\r\n// User Sudoku Functions\r\nexport const getUserSudoku = (userInput: string): SudokuType => {\r\n\tconst userSudokuParsed = JSON.parse(userInput).board;\r\n\tconst formatted = formatUserBoard(userSudokuParsed);\r\n\tconst solution = solveUserBoard(formatted);\r\n\treturn {\r\n\t\tboard: formatted,\r\n\t\tsolution: solution,\r\n\t};\r\n};\r\n\r\nexport const validateSudokuBoard = (\r\n\tboard: Board,\r\n\tprintErrors: boolean,\r\n\tsolution?: Board\r\n): Board => {\r\n\tboard.forEach((array: number[], y: number) => {\r\n\t\tarray.forEach((element: number, x: number) => {\r\n\t\t\tif (printErrors && solution) {\r\n\t\t\t\tif (element !== solution[y][x] && element !== 0) {\r\n\t\t\t\t\tboard[y][x] = 10;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\telement === 10 ? (board[y][x] = 0) : (board[y][x] = element);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\treturn board;\r\n};\r\n\r\nexport const alertSudokuValidation = (\r\n\tcandidate: Board,\r\n\tsolution: Board\r\n): void => {\r\n\tif (candidate.every((array, index) => array === solution[index])) {\r\n\t\talert('Congratulations, sudoku solved correctly !');\r\n\t} else {\r\n\t\tconsole.log(candidate);\r\n\t\talert('Sorry, sudoku solved wrong !');\r\n\t}\r\n};\r\n\r\nconst checkShape = (board: Board) => {\r\n\tconst SUDOKU_SIZE = 9;\r\n\tif (board.length !== SUDOKU_SIZE || board[0].length !== SUDOKU_SIZE) {\r\n\t\treturn false;\r\n\t} else return true;\r\n};\r\n\r\nconst tryBoard = [\r\n\t[0, 0, 8, 0, 0, 9, 0, 0, 0],\r\n\t[0, 0, 0, 0, 5, 0, 7, 0, 0],\r\n\t[0, 6, 0, 0, 0, 8, 0, 2, 0],\r\n\t[0, 2, 0, 0, 0, 0, 0, 9, 0],\r\n\t[0, 5, 7, 8, 0, 1, 0, 0, 0],\r\n\t[8, 9, 0, 7, 0, 3, 4, 5, 1],\r\n\t[0, 0, 0, 6, 0, 2, 9, 7, 8],\r\n\t[6, 7, 2, 9, 8, 4, 0, 1, 3],\r\n\t[0, 0, 0, 5, 0, 0, 6, 0, 2],\r\n];\r\n","import { Board, SudokuType } from './types';\r\nimport {\r\n\tgetSudoku,\r\n\tgetUserSudoku,\r\n\tvalidateSudokuBoard,\r\n\talertSudokuValidation,\r\n} from '../../utils/sudokuFunctions';\r\n\r\nexport const handleNewGame = (\r\n\tsetSudoku: React.Dispatch<React.SetStateAction<SudokuType>>,\r\n\tsetCandidate: React.Dispatch<React.SetStateAction<Board>>,\r\n\tsetValidating: React.Dispatch<React.SetStateAction<boolean>>,\r\n\tuserSudoku?: SudokuType\r\n): void => {\r\n\tconst newSudoku = userSudoku || getSudoku();\r\n\tsetSudoku(newSudoku);\r\n\tsetCandidate(newSudoku.board);\r\n\tsetValidating(false);\r\n};\r\n\r\nexport const handleValidateSudoku = (\r\n\tboard: Board,\r\n\tsolution: Board,\r\n\tcandidate: Board,\r\n\tisValidating: boolean,\r\n\tsetBoard: React.Dispatch<React.SetStateAction<Board>>,\r\n\tsetCandidate: React.Dispatch<React.SetStateAction<Board>>,\r\n\tsetValidating: React.Dispatch<React.SetStateAction<boolean>>\r\n): void => {\r\n\tif (!isValidating) {\r\n\t\tsetCandidate(Object.assign(board));\r\n\t\tsetBoard(validateSudokuBoard(candidate, true, solution));\r\n\t} else {\r\n\t\tsetCandidate(Object.assign(board));\r\n\t\tsetBoard(validateSudokuBoard(candidate, false));\r\n\t}\r\n\tsetValidating((isValidating) => !isValidating);\r\n};\r\n\r\nexport const handleValidateFullBoard = (\r\n\tboard: Board,\r\n\tsolution: Board\r\n): void => {\r\n\tif (board.every((arr) => arr.every((el) => el !== 0))) {\r\n\t\talertSudokuValidation(board, solution);\r\n\t}\r\n};\r\n\r\nexport const handleFetchBoard = (\r\n\tsetSudoku: React.Dispatch<React.SetStateAction<SudokuType>>,\r\n\tsetCandidate: React.Dispatch<React.SetStateAction<Board>>,\r\n\tsetValidating: React.Dispatch<React.SetStateAction<boolean>>\r\n): void => {\r\n\tconst userInput = prompt('paste board in form of JSON string');\r\n\tif (typeof userInput !== 'string' || userInput === '') return;\r\n\ttry {\r\n\t\tconst userSudoku = getUserSudoku(userInput);\r\n\t\tif (!userSudoku.solution) {\r\n\t\t\talert('Board is not solvable!');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\thandleNewGame(setSudoku, setCandidate, setValidating, userSudoku);\r\n\t\talert('User board set correctly...');\r\n\t} catch (e) {\r\n\t\talert('Invalid sudoku input');\r\n\t\tconsole.error(e);\r\n\t}\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './SudokuOptions.scss';\r\nimport {\r\n\thandleNewGame,\r\n\thandleValidateSudoku,\r\n\thandleValidateFullBoard,\r\n\thandleFetchBoard,\r\n} from './index';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { SudoOptionsProps } from './types';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\troot: {\r\n\t\t\t'& > *': {\r\n\t\t\t\tmargin: theme.spacing(2),\r\n\t\t\t\t// position: 'static',\r\n\t\t\t},\r\n\t\t},\r\n\t})\r\n);\r\n\r\nexport const SudokuOptions = ({\r\n\tsolution,\r\n\tboard,\r\n\tsetBoard,\r\n\tsetSudoku,\r\n}: SudoOptionsProps): JSX.Element => {\r\n\tconst classes = useStyles();\r\n\tconst [candidate, setCandidate] = useState(board);\r\n\tconst [isValidating, setValidating] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\thandleValidateFullBoard(board, solution);\r\n\t}, [board]);\r\n\r\n\treturn (\r\n\t\t<section className=\"Options-box-wrapper\">\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\tonClick={() => handleNewGame(setSudoku, setCandidate, setValidating)}\r\n\t\t\t\t>\r\n\t\t\t\t\tNew Game\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\thandleValidateSudoku(\r\n\t\t\t\t\t\t\tboard,\r\n\t\t\t\t\t\t\tsolution,\r\n\t\t\t\t\t\t\tcandidate,\r\n\t\t\t\t\t\t\tisValidating,\r\n\t\t\t\t\t\t\tsetBoard,\r\n\t\t\t\t\t\t\tsetCandidate,\r\n\t\t\t\t\t\t\tsetValidating\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\t{isValidating ? 'Return' : 'Validate'}\r\n\t\t\t\t</Button>{' '}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\thandleFetchBoard(setSudoku, setCandidate, setValidating);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tFetch Board\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default SudokuOptions;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Sudoku.scss';\r\nimport BoxWrapper from './BoxWrapper/BoxWrapper';\r\nimport SudokuRow from './SudokuRow';\r\nimport SudokuOptions from '../SudokuOptions/SudokuOptions';\r\nimport { Board, SudokuType } from './types';\r\nimport { getSudoku } from '../../utils/sudokuFunctions';\r\nimport { uuid } from 'uuidv4';\r\n\r\nexport const Sudoku = (): JSX.Element => {\r\n\tconst sudokuGame = getSudoku();\r\n\tconst [sudoku, setSudoku] = useState<SudokuType>(sudokuGame);\r\n\tconst [board, setBoard] = useState<Board>([...sudoku.board]);\r\n\tconst [solution, setSolution] = useState<Board>(sudoku.solution);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetBoard([...sudoku.board]);\r\n\t\tsetSolution(sudoku.solution);\r\n\t}, [sudoku]);\r\n\r\n\treturn (\r\n\t\t<div className=\"sudoku-container\">\r\n\t\t\t<BoxWrapper board={board} />\r\n\t\t\t<div className=\"sudoku-board-wrapper\">\r\n\t\t\t\t<div className=\"sudoku-board\">\r\n\t\t\t\t\t{board &&\r\n\t\t\t\t\t\tboard.map((array, row: number) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<SudokuRow\r\n\t\t\t\t\t\t\t\t\tarray={array}\r\n\t\t\t\t\t\t\t\t\trow={row}\r\n\t\t\t\t\t\t\t\t\tboard={board}\r\n\t\t\t\t\t\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\t\t\t\t\t\tkey={uuid()}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<SudokuOptions\r\n\t\t\t\tboard={board}\r\n\t\t\t\tsolution={solution}\r\n\t\t\t\tsetBoard={setBoard}\r\n\t\t\t\tsetSudoku={setSudoku}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Sudoku;\r\n","import React from 'react';\nimport './App.scss';\nimport Sudoku from '../Sudoku/Sudoku';\n\nexport const App = (): JSX.Element => {\n\treturn (\n\t\t<div className=\"App sudoku-wrapper\">\n\t\t\t<Sudoku />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}